package interfazgrafica.VentanasUsuario;

import interfazgrafica.Ordenadores.OrdenarMapaPorValor;
import interfazgrafica.ClasesBase.Planta;
import interfazgrafica.ClasesBase.Venta;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ConsultarRanking extends javax.swing.JFrame {
    /**
     * Set de Venta, contiene todas las ventas realizadas en el programa
     */
    private Set <Venta> setVentas;
    /**
     * Set de Planta, contiene todas las plantas del programa
     */
    private Set<Planta> setPlantas;
    /**
     * model de la tabla jTableRanking
     */
    private DefaultTableModel model;
    /**
     * jFrame padre
     */
    private MenuPrincipal padre;
    
    /**
     Constructor de la clase, inicializa los sets, las fechas mostradas y define la operaci√≥n a realizarse cuando se oprime la x para cerrar la ventana
     * @param setVentas set de Venta, contiene todas las ventas del programa
     * @param setPlantas set de Planta, contiene todas las plantas del programa
     * @param mp Menu Principal, jFrame padre de esta ventana
     */
    public ConsultarRanking(Set<Venta> setVentas,Set<Planta> setPlantas,MenuPrincipal mp) {
        initComponents();
        this.setVentas = setVentas;
        this.setPlantas = setPlantas;
        padre = mp;
        model = (DefaultTableModel) jTableRanking.getModel();
        Calendar fecha = new GregorianCalendar();
        jDateChooserFechaFinal.setCalendar(fecha);
        fecha.set(fecha.get(Calendar.YEAR),fecha.get(Calendar.MONTH),fecha.get(Calendar.DATE)-7);
        jDateChooserFechaInicial.setCalendar(fecha);
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                    padre.setEnabled(true);
                    dispose();
                }
        });
    }

    private ConsultarRanking() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelFondo = new javax.swing.JPanel();
        jButtonVolver = new javax.swing.JButton();
        jPanelRankings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRanking = new javax.swing.JTable();
        jDateChooserFechaInicial = new com.toedter.calendar.JDateChooser();
        jDateChooserFechaFinal = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonConsultarRanking = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(590, 580));
        setPreferredSize(new java.awt.Dimension(590, 580));
        setResizable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("Ranking de Ventas"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanelFondo.setBackground(new java.awt.Color(204, 255, 204));

        jButtonVolver.setBackground(new java.awt.Color(255, 255, 255));
        jButtonVolver.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jPanelRankings.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        jLabel1.setText("Ingrese el rango de fechas del cual quiere consultar el ranking de ventas:");

        jTableRanking.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        jTableRanking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Puesto", "Nombre popular", "Cantidad de Ventas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRanking.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableRanking);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jDateChooserFechaInicial, org.jdesktop.beansbinding.ELProperty.create("${calendar.time}"), jDateChooserFechaInicial, org.jdesktop.beansbinding.BeanProperty.create("maxSelectableDate"));
        bindingGroup.addBinding(binding);

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        jLabel2.setText("Fecha inicial");

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        jLabel3.setText("Fecha final");

        jButtonConsultarRanking.setBackground(new java.awt.Color(255, 255, 255));
        jButtonConsultarRanking.setFont(new java.awt.Font("Microsoft YaHei Light", 0, 12)); // NOI18N
        jButtonConsultarRanking.setText("Consultar Ranking");
        jButtonConsultarRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarRankingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRankingsLayout = new javax.swing.GroupLayout(jPanelRankings);
        jPanelRankings.setLayout(jPanelRankingsLayout);
        jPanelRankingsLayout.setHorizontalGroup(
            jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRankingsLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRankingsLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(jPanelRankingsLayout.createSequentialGroup()
                        .addGroup(jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jDateChooserFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelRankingsLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(147, 147, 147))
                            .addGroup(jPanelRankingsLayout.createSequentialGroup()
                                .addComponent(jDateChooserFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonConsultarRanking))))
                    .addGroup(jPanelRankingsLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelRankingsLayout.setVerticalGroup(
            jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRankingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelRankingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooserFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConsultarRanking))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelFondoLayout = new javax.swing.GroupLayout(jPanelFondo);
        jPanelFondo.setLayout(jPanelFondoLayout);
        jPanelFondoLayout.setHorizontalGroup(
            jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFondoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanelRankings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(288, 288, 288))
            .addGroup(jPanelFondoLayout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addComponent(jButtonVolver)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelFondoLayout.setVerticalGroup(
            jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFondoLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanelRankings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButtonVolver)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 590, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        padre.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jButtonConsultarRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarRankingActionPerformed
        boolean estaBien = true;
        Calendar fechaInicial = jDateChooserFechaInicial.getCalendar();
        Calendar fechaFinal = jDateChooserFechaFinal.getCalendar();
        Calendar fechaActual = null;
        fechaActual = fechaActual.getInstance();
        Set <Integer> setCodigoPlanta = new HashSet<>();
        Map <Integer,Integer> ranking = new HashMap<>();
        
        model.setRowCount(0);
        
        if(fechaInicial == null || fechaFinal == null){
            JOptionPane.showMessageDialog(null,"El formato de la fecha es incorrecto. Intente nuevamente.","Advertencia",JOptionPane.WARNING_MESSAGE);
            estaBien = false;
        }

        if(estaBien){
            if(fechaInicial.compareTo(fechaActual)>0){
                JOptionPane.showMessageDialog(null,"La fecha inicial debe ser anterior a la fecha actual. Intente nuevamente.","Advertencia",JOptionPane.WARNING_MESSAGE);
                estaBien = false;
            }
        }
        
        if(estaBien){
            if(fechaFinal.compareTo(fechaActual)>0){
                JOptionPane.showMessageDialog(null,"La fecha final debe ser anterior a la fecha actual. Intente nuevamente.","Advertencia",JOptionPane.WARNING_MESSAGE);
                estaBien = false;
            }
        }
        
        if(estaBien){
            if(fechaInicial.compareTo(fechaFinal)>0){
                JOptionPane.showMessageDialog(null,"La fecha inicial es mayor que la fecha final. Intente nuevamente.","Advertencia",JOptionPane.WARNING_MESSAGE);
                estaBien = false;
            }
        }
        
        if(estaBien){
            Iterator i = setVentas.iterator();
            while(i.hasNext()){
                Venta v = (Venta) i.next();
                if(v.getFecha().compareTo(fechaInicial)>=0 && v.getFecha().compareTo(fechaFinal)<=0){
                    setCodigoPlanta = v.getVenta().keySet();
                    Iterator j = setCodigoPlanta.iterator();
                    while(j.hasNext()){
                       int codigoPlanta  = (Integer) j.next();
                       int cantidadASumar = (Integer) v.getVenta().get(codigoPlanta);
                       if(ranking.containsKey(codigoPlanta)){
                           int cantidadVieja = ranking.get(codigoPlanta);
                           ranking.put(codigoPlanta,cantidadVieja+cantidadASumar);
                       }
                       else
                           ranking.put(codigoPlanta,cantidadASumar);
                    }
                }
            }
            TreeMap <Integer,Integer> mapaOrdenado = new TreeMap(new OrdenarMapaPorValor(ranking));
            mapaOrdenado.putAll(ranking);
            
            Iterator k = mapaOrdenado.entrySet().iterator();
            int contador = 0;
            while (k.hasNext()){
                Map.Entry <Integer,Integer> mentry = (Map.Entry)k.next();
                model.addRow(new Object[]{contador+1,this.buscarNombreDePlantaPorCodigo(mentry.getKey()), mentry.getValue()});
                contador++;
            }
            
            if(mapaOrdenado.isEmpty()){
                JOptionPane.showMessageDialog(null,"No hay ventas en ese rango de fecha. Intente nuevamente.","Advertencia",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonConsultarRankingActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if(setVentas.isEmpty()){
            JOptionPane.showMessageDialog(null,"No hay registro de ventas","Informacion",JOptionPane.INFORMATION_MESSAGE);
            padre.setEnabled(true);
            this.dispose();
        }
        Calendar fechaInicial = jDateChooserFechaInicial.getCalendar();
        Calendar fechaFinal = jDateChooserFechaFinal.getCalendar();
        Calendar fechaActual = null;
        fechaActual = fechaActual.getInstance();
        Set <Integer> setCodigoPlanta = new HashSet<>();
        Map <Integer,Integer> ranking = new HashMap<>();
        Iterator i = setVentas.iterator();
            while(i.hasNext()){
                Venta v = (Venta) i.next();
                if(v.getFecha().compareTo(fechaInicial)>=0 && v.getFecha().compareTo(fechaFinal)<=0){
                    setCodigoPlanta = v.getVenta().keySet();
                    Iterator j = setCodigoPlanta.iterator();
                    while(j.hasNext()){
                       int codigoPlanta  = (Integer) j.next();
                       int cantidadASumar = (Integer) v.getVenta().get(codigoPlanta);
                       if(ranking.containsKey(codigoPlanta)){
                           int cantidadVieja = ranking.get(codigoPlanta);
                           ranking.put(codigoPlanta,cantidadVieja+cantidadASumar);
                       }
                       else
                           ranking.put(codigoPlanta,cantidadASumar);
                    }
                }
            }
            TreeMap <Integer,Integer> mapaOrdenado = new TreeMap(new OrdenarMapaPorValor(ranking));
            mapaOrdenado.putAll(ranking);
            
            Iterator k = mapaOrdenado.entrySet().iterator();
            int contador = 0;
            while (k.hasNext()){
                Map.Entry <Integer,Integer> mentry = (Map.Entry)k.next();
                model.addRow(new Object[]{contador+1,this.buscarNombreDePlantaPorCodigo(mentry.getKey()), mentry.getValue()});
                contador++;
            } 
    }//GEN-LAST:event_formComponentShown

    /**
     * Encuentra y devuelve el nombre de una planta usando el c√≥digo de la misma
     * @param codigo c√≥digo de la planta cuyo nombre se desea saber
     * @return El nombre de la planta
     */
    public String buscarNombreDePlantaPorCodigo(int codigo){
        Iterator i = setPlantas.iterator();
        Planta aux;
        String nombre = "";
        while(i.hasNext()){
            aux = (Planta)i.next();
            if(aux.getCodigo() == codigo){
                nombre = aux.getDenominacionComun();
            }
        }
        return nombre;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultarRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultarRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultarRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultarRanking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultarRanking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonConsultarRanking;
    private javax.swing.JButton jButtonVolver;
    private com.toedter.calendar.JDateChooser jDateChooserFechaFinal;
    private com.toedter.calendar.JDateChooser jDateChooserFechaInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanelFondo;
    private javax.swing.JPanel jPanelRankings;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRanking;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
