package interfazgrafica.VentanasUsuario;

import interfazgrafica.ClasesBase.Pedido;
import interfazgrafica.ClasesBase.Cliente;
import interfazgrafica.ClasesBase.Planta;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class RegistrarComoTerminado extends javax.swing.JFrame {
    /**
     * Set con todos los clientes registrados
     */
    private Set<Cliente> setClientes;
    /**
     * Set con todos los pedidos registrados
     */
    private Set<Pedido> setPedidos;
    /**
     *  Set donde se almacena todos los pedidos sin terminar
     */
    private Set<Pedido> setPedidosAux;
    /**
     *  Modelo de la tabla donde se muestran los pedidos sin terminar
     */
    private DefaultTableModel modelPedidos;
    /**
     *  Modelo de la tabla donde se muestran los detalles de un pedido seleccionado
     */
    private DefaultTableModel modelDetalles;
    /**
     *  Mapa cuya clave es el codigo de un pedido y el valor es el nombre de un cliente
     */
    private Map<Integer, String> mapCodNom;
    /**
     * Variable donde se almacena el pedido seleccionado por pantalla
     */
    private Pedido elPedido;
    /**
     * jFrame Padre
     */
    private MenuPrincipal padre;
    /**
     * Creates new form registrarComoTerminado
     */
    public RegistrarComoTerminado() {
        initComponents();
    }
    /**
     * Registra un pedido como terminado
     * @param clientes
     * @param pedidos
     * Muestra por pantalla todos los pedidos que estan sin terminar y permite seleccionar alguno, ver sus detelles y confirmarlo si ya se terminó.
     * @param mp Menu Principal, jFrame padre de esta ventana
     */
    public RegistrarComoTerminado(Set<Pedido> pedidos, Set<Cliente> clientes, MenuPrincipal mp) {
        initComponents();
        setPedidos = pedidos;
        setClientes = clientes;
        padre = mp;
        setPedidosAux = new HashSet();
        modelPedidos = (DefaultTableModel) jTablePedidos.getModel();
        modelDetalles = (DefaultTableModel) jTableDetalles.getModel();
        mapCodNom = new HashMap();
        Iterator i;
        i = setPedidos.iterator();
        while(i.hasNext()){//En el set de pedidos auxiliar sólo me interesa tener a los pedidos que no esten terminados
            Pedido pedidoI = (Pedido) i.next();
            if(!pedidoI.getEstado()){//Si no esta terminado lo agrego
                setPedidosAux.add(pedidoI);
            }
        }
        this.addWindowListener(new WindowAdapter(){//Cuando cierra la ventana con la x, realiza las siguientes operaciones
                @Override
                public void windowClosing(WindowEvent e){
                    padre.setEnabled(true);
                    dispose();
                }
            });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jTextFieldBuscar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDetalles = new javax.swing.JTable();
        jButtonRegTerminado = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePedidos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanelCorreo = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));
        setPreferredSize(new java.awt.Dimension(590, 620));
        setResizable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("Registrar como Terminado"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jTextFieldBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldBuscarKeyTyped(evt);
            }
        });

        jTableDetalles.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jTableDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre popular", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDetalles.setEnabled(false);
        jTableDetalles.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableDetalles);

        jButtonRegTerminado.setBackground(new java.awt.Color(255, 255, 255));
        jButtonRegTerminado.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jButtonRegTerminado.setText("Registrar como terminado");
        jButtonRegTerminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegTerminadoActionPerformed(evt);
            }
        });

        jButtonCancelar.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCancelar.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jLabel1.setText("Pedidos Vigentes");

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jLabel2.setText("Pedido Seleccionado");

        jTablePedidos.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jTablePedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre del cliente", "Numero de pedido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePedidos.getTableHeader().setReorderingAllowed(false);
        jTablePedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePedidosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTablePedidos);

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI Light", 0, 12)); // NOI18N
        jLabel3.setText("Ingrese el nombre del pedido vigente a buscar:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jButtonRegTerminado)
                .addGap(58, 58, 58)
                .addComponent(jButtonCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(3, 3, 3)
                .addComponent(jTextFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRegTerminado)
                    .addComponent(jButtonCancelar))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanelCorreo.setBackground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout jPanelCorreoLayout = new javax.swing.GroupLayout(jPanelCorreo);
        jPanelCorreo.setLayout(jPanelCorreoLayout);
        jPanelCorreoLayout.setHorizontalGroup(
            jPanelCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );
        jPanelCorreoLayout.setVerticalGroup(
            jPanelCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 566, Short.MAX_VALUE)
                .addComponent(jPanelCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    private void jButtonRegistrarComoTerminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarComoTerminadoActionPerformed
        // Falta que concrete su objetivo!!!
        //MenuPrincipal menu=new MenuPrincipal();
        //this.dispose();
        //menu.setVisible(true);
    }//GEN-LAST:event_jButtonRegistrarComoTerminadoActionPerformed
*/
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        MenuPrincipal menu=new MenuPrincipal();
        this.dispose();
        menu.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * Vuelve al menu principal sin realizar cambios
     * @param evt 
     */
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        padre.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed
    /**
     * Registra un pedido seleccionado como terminado.
     * Si no hay ningun pedido seleccionado muestra una advertencia.
     * @param evt 
     */
    private void jButtonRegTerminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegTerminadoActionPerformed
        try{//El pedido es null si no hay algun pedido seleccionado
            elPedido.getCodigo();//Sirve para desencadenar la excepcion NullPointerException si no tiene nada seleccionado
            int reply = JOptionPane.showConfirmDialog(null,"Esta seguro que desea registrar como terminado? Esta accion no se puede deshacer","Advertencia",JOptionPane.YES_NO_OPTION);
            if(reply == JOptionPane.YES_OPTION){
                setPedidos.remove(elPedido);//Saco del set con todos los Pedidos al pedido seleccionado
                elPedido.setEstado(true);//Modifico el estado del pedido seleccionado
                setPedidos.add(elPedido);//Vuelvo a agregar el pedido
                modelDetalles.setRowCount(0);//Inicializo de nuevo las tablas y el mapa
                modelPedidos.removeRow(jTablePedidos.getSelectedRow());
                mapCodNom.clear();   
                try{
                    this.pedidoTerminado();
                }
                catch(IOException ioe){
                    JOptionPane.showMessageDialog(null,"No se pudo escribir el archivo \"Pedido\"","Error",JOptionPane.ERROR_MESSAGE);
                }
                this.setVisible(false);
                padre.setVisible(true);
                this.setVisible(true);
                elPedido = null;
            }
            
        }
        catch(NullPointerException npe){
            JOptionPane.showMessageDialog(null,"Debe tener un pedido seleccionado","Advertencia",JOptionPane.WARNING_MESSAGE);
        }
        
        
        
    }//GEN-LAST:event_jButtonRegTerminadoActionPerformed

    public void pedidoTerminado() throws IOException{
        String pedido;
        String nuevalinea = System.getProperty("line.separator");
        pedido = String.valueOf(elPedido.getCodigo());
        File f = new File(".\\Emails\\"+pedido+".txt");
        FileWriter escribo = new FileWriter(f);
        BufferedWriter escribir = new BufferedWriter(escribo);
        if(f.exists()){
            int codCliente = elPedido.getCodigoCliente();
            Iterator i;
            i = setClientes.iterator();
            while(i.hasNext()){
                Cliente clienteI = (Cliente) i.next();
                if(codCliente == clienteI.getCodigo()){
                    escribir.write(clienteI.getEmail()+nuevalinea+nuevalinea);
                    escribir.write("Su pedido ha sido terminado"+nuevalinea+nuevalinea);
                    escribir.write("Datos del cliente:"+nuevalinea);
                    escribir.write(clienteI.toString());
                    escribir.write(nuevalinea+"Datos del pedido:"+nuevalinea);
                    escribir.write(elPedido.toString());
                    JOptionPane.showMessageDialog(jPanelCorreo,"Has recibido un nuevo correo",clienteI.getEmail(),JOptionPane.INFORMATION_MESSAGE);
                }
            }
            escribir.newLine();
            escribir.close();
        }
    }
    
    private void jTextFieldBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBuscarKeyTyped
        String nombreBuscado;
        modelPedidos.setRowCount(0);
        mapCodNom.clear();
        nombreBuscado = jTextFieldBuscar.getText();//Obtengo el nombre buscado
        nombreBuscado = nombreBuscado.toUpperCase();//Lo paso a mayusculas
        String clienteado;
        int codeado;
        int codi;
        Iterator i;
        i = setClientes.iterator();
        while(i.hasNext()){//Itero sobre los clientes
            Cliente clienteI = (Cliente) i.next();
            clienteado = clienteI.getNombre();
            clienteado = clienteado.toUpperCase();
            if(clienteado.contains(nombreBuscado)){//Si el nombre del cliente i contiene al que se busca
                codi = clienteI.getCodigo();//Obtengo el codigo del cliente i
                mapCodNom.put(codi, clienteI.getNombre());//cargo el mapa con el codigo del cliente y su nombre
            }
        }
        Set<Integer> claves = mapCodNom.keySet();
        i = setPedidosAux.iterator();
        while(i.hasNext()){//Itero sobre los pedidos no terminados
            Pedido pedidoI = (Pedido) i.next();
            codeado = pedidoI.getCodigoCliente();
            Iterator j;
            j = claves.iterator();
            while(j.hasNext()){//Itero sobre el mapa con los clientes que coincidian
                codi = (Integer) j.next();
                if(codi == codeado){//Si el codigo de cliente del pedido i, es igual a un codigo en el mapa
                    if(!pedidoI.getEstado()){//Lo agrego a la tabla con los pedidos
                        modelPedidos.addRow(new Object[]{mapCodNom.get(codi),pedidoI.getCodigo()});
                    }
                }
            }
        }
    }//GEN-LAST:event_jTextFieldBuscarKeyTyped

    private void jTablePedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePedidosMouseClicked
         modelDetalles.setRowCount(0);
        String codPedidoS, estado,retirado;
        int codPedidoI, codeado;
        Iterator i,j,k;
        Planta p;
        try{
            codPedidoS=String.valueOf(modelPedidos.getValueAt(jTablePedidos.getSelectedRow(),1));
            codPedidoI = Integer.parseInt(codPedidoS);
            i = setPedidosAux.iterator();
            while(i.hasNext()){
                Pedido pedidoI = (Pedido) i.next();
                codeado = pedidoI.getCodigo();
                if(codPedidoI == codeado){
                    elPedido = pedidoI;
                    Map<Planta, Integer> planta;
                    planta = pedidoI.getPedido();
                    k = planta.keySet().iterator();
                    while(k.hasNext()){
                        p = (Planta) k.next();
                        modelDetalles.addRow(new Object[]{p.getDenominacionComun(),planta.get(p)});
                    }
                }
            }
        }
        catch(ArrayIndexOutOfBoundsException aioobe){
            JOptionPane.showMessageDialog(null,"Debe tener un pedido seleccionado","Advertencia",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jTablePedidosMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        Iterator i;
        modelPedidos.setRowCount(0);
        mapCodNom.clear();
        int codeado;
        int codi;
        i = setClientes.iterator();
        while(i.hasNext()){//Itero sobre los clientes
            Cliente clienteI = (Cliente) i.next();
            codi = clienteI.getCodigo();//Obtengo el codigo del cliente i
            mapCodNom.put(codi, clienteI.getNombre());//cargo el mapa con el codigo del cliente y su nombre
        }
        Set<Integer> claves = mapCodNom.keySet();
        i = setPedidosAux.iterator();
        while(i.hasNext()){//Itero sobre los pedidos no terminados
            Pedido pedidoI = (Pedido) i.next();
            codeado = pedidoI.getCodigoCliente();
            Iterator j;
            j = claves.iterator();
            while(j.hasNext()){//Itero sobre el mapa con los clientes que coincidian
                codi = (Integer) j.next();
                if(codi == codeado){//Si el codigo de cliente del pedido i, es igual a un codigo en el mapa
                    if(!pedidoI.getEstado()){//Lo agrego a la tabla con los pedidos
                        modelPedidos.addRow(new Object[]{mapCodNom.get(codi),pedidoI.getCodigo()});
                    }
                }
            }
        }
        if(modelPedidos.getRowCount()==0){//Si la tabla esta vacía es porque no hay pedidos sin terminar que coincidan con la busqueda
            JOptionPane.showMessageDialog(null,"No hay pedidos sin terminar","Informacion",JOptionPane.INFORMATION_MESSAGE);
            padre.setEnabled(true);
            this.dispose();
        }
    }//GEN-LAST:event_formComponentShown

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarComoTerminado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarComoTerminado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarComoTerminado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarComoTerminado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarComoTerminado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonRegTerminado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCorreo;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableDetalles;
    private javax.swing.JTable jTablePedidos;
    private javax.swing.JTextField jTextFieldBuscar;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
